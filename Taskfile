#!/bin/bash

RM=rm

function clean {    # Clean binaries
    $RM -rf bin
}

function build {    # Build {compiler:gcc} {optimizationchar:0}
  clean
  mkdir -p bin
  CC=${1:-gcc}
  OPT=${2:-3}

  case $CC in
    gcc)
      LDFLAGS=-fwhole-program
      ;;
    clang)
      LDFLAGS=-flto
      ;;
    mingw-gcc)
      LDLIBS=-lkernel32
      ;;
  esac

  for f in test/*; do
    x="${f##*/}"
    x="${x%.*}";
    $CC -I. -static -fno-builtin -fno-asynchronous-unwind-tables -Wl,--gc-sections -s -Wall -Wextra -Wpedantic -O$OPT $LDFLAGS $f -ffreestanding -nostdlib -lgcc $LDLIBS -o bin/$x  
  done
}

function verify {    # Verify executables don't depend on stdlib and contain no bloat
  # Build first to ensure we have current binaries
  build

  echo "=== Verifying executables are stdlib-independent and bloat-free ==="
  
  for exe in bin/*; do
    if [ -f "$exe" ] && [ -x "$exe" ]; then
      echo
      echo "Analyzing: $exe"
      echo "----------------------------------------"
      
      # Check dependencies and print all of them for each executable
      echo -n "✓ Dependencies: "
      echo
      echo "  All dependencies for $exe:"
      if ldd "$exe" 2>&1 | grep -q "not a dynamic executable"; then
        echo "    (No dynamic dependencies - statically linked)"
      elif command -v ldd >/dev/null 2>&1; then
        ldd "$exe" 2>/dev/null | sed 's/^/    /' || echo "    Error reading dependencies"
      else
        echo "    (ldd not available - cannot check dependencies)"
      fi
      
      # Alternative dependency check using readelf - show all dynamic entries
      echo -n "✓ Dynamic section: "
      if readelf -d "$exe" 2>/dev/null | grep -q "There is no dynamic section"; then
        echo "PASS (no dynamic section)"
      else
        echo "PRESENT (showing all dynamic dependencies):"
        readelf -d "$exe" 2>/dev/null | grep -E "(NEEDED|Shared library)" | sed 's/^/  /' || echo "  No NEEDED entries found"
      fi
      
      # Check binary type and ensure it's stripped
      echo -n "✓ Binary type: "
      file_output=$(file "$exe")
      if echo "$file_output" | grep -q "statically linked" && echo "$file_output" | grep -q "stripped"; then
        echo "PASS (static, stripped)"
      else
        echo "FAIL"
        echo "  $file_output"
      fi

      
      # Check for standard library symbols/strings
      echo -n "✓ No stdlib symbols: "
      stdlib_symbols=$(strings "$exe" | grep -E "(libc|glibc|stdlib|printf|malloc|free|__glibc)" | head -5)
      if [ -z "$stdlib_symbols" ]; then
        echo "PASS"
      else
        echo "FAIL (found stdlib references)"
        echo "$stdlib_symbols"
      fi
      
      # Show binary size for bloat assessment
      echo -n "✓ Binary size: "
      size_output=$(size "$exe" | tail -n 1)
      text_size=$(echo "$size_output" | awk '{print $1}')
      total_size=$(echo "$size_output" | awk '{print $4}')
      echo "${total_size} bytes (text: ${text_size})"
      
      # Check for excessive symbols (should be minimal or none due to stripping)
      echo -n "✓ Symbol count: "
      symbol_count=$(nm "$exe" 2>/dev/null | wc -l)
      if [ "$symbol_count" -eq 0 ]; then
        echo "PASS (no symbols - stripped)"
      elif [ "$symbol_count" -lt 10 ]; then
        echo "WARN ($symbol_count symbols)"
      else
        echo "FAIL ($symbol_count symbols - too many)"
      fi
    fi
  done
  
  echo
  echo "=== Verification complete ==="
}

function help {     # Prints help
    echo "Usage: $0 <task> <args>"
    echo "Execute a task with the specified arguments."
    echo "By adding 'alias run=./Taskfile' you can then call it as 'run <task> <args>"
    echo
    echo "Tasks:"
    grep '^function .* #.* ' Taskfile | # Start with function and has # somewhere
      cut -d' ' -f 2- |                 # Remove the word 'function'
      tr -d '{' |                       # Remove '{}'
      sed 's/^/  /g' |                  # Indent by two spaces
      column --table --separator '#'    # column it using # as the separator
}

${@:-help}
